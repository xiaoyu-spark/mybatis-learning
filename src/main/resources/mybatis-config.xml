<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--注意子元素位置的顺序，否则报错-->
<configuration>
    <properties resource="mybatis.properties">
        <!--虽然这里定义了，但是被替换为配置文件中的属性-->
        <!--通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。-->
        <property name="username" value="dev_user"/>
        <property name="password" value="F2Fa3!33TYyg"/>
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
    </properties>
    <settings>
        <!--全局地开启或关闭配置文件中的所有映射器mapper(二级缓存)已经配置的任何缓存，默认为true。 参考readme 1(注意：同时需要在mapper.xml中增加<cache/>参考roleMapper.xml)-->
        <!--session必须commit之后，二级缓存才起作用-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认false-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载（参考lazyLoadTriggerMethods). 默认false (true in ≤3.4.1)-->
        <setting name="aggressiveLazyLoading" value="false "/>
        <!--是否允许单一语句返回多结果集（需要兼容驱动）。true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。false-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 PARTIAL-->
        <!--这句话有点拗口，意思就是映射文件中，对于resultMap标签，如果没有显式定义result标签，mybatis不会帮你把结果映射到model(pojo)上.-->
        <!--demo
        <resultMap id="FeelingCommentResult" type="Feeling">
        <id property="feeling_id" column="feeling_id" />
            <collection property="feelingComments" ofType="FeelingComment">
                <id property="feeling_comment_id" column="feeling_comment_id" />
            </collection>
        </resultMap>
        <select id="selectFeelingComment" parameterType="map" resultMap="FeelingCommentResult">
            select * from feeling left outer join feeling_comment on feeling.feeling_id=feeling_comment.feeling_id where feeling.id =#{id}
        </select>
        -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。
            NONE: 不做任何反应
            WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
            FAILING: 映射失败 (抛出 SqlSessionException)
        -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新 SIMPLE-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。 null-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 null-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。  false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 false-->
        <!--must-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 SESSION-->
        <!-- 注意：据说会在与spring结合使用时出现问题，修改为STATEMENT可解决-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 OTHER-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。 用逗号分隔的方法列表。 -->
        <!--触发所有延迟加载属性立即执行加载-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>

    <typeAliases>
        <!--类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余-->
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:
        <typeAliases>
          <package name="training.bean"/>
        </typeAliases>
        class加注解：  @Alias("setting")
        -->
        <!--参考settingMapper.xml resultType-->
        <typeAlias alias="Setting" type="training.bean.Setting"/>
        <typeAlias alias="Enable" type="training.bean.Enable"/>
        <typeAlias alias="AdminUser" type="training.bean.AdminUser"/>
    </typeAliases>


    <!--
    重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。
    具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口，
    或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler，
    然后可以选择性地将它映射到一个 JDBC 类型。比如：
    -->
    <typeHandlers>
        <typeHandler handler="training.common.MyIntegerTypeHandler"/>
    </typeHandlers>

    <!--MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。
    默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。
    如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现-->
    <objectFactory type="training.common.DbObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>

    <environments default="development">
        <environment id="development">
            <!--事务控制   参考readme 3-->
            <transactionManager type="JDBC" />

            <!-- 配置数据库连接信息 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="${db.url}" />
                <!--占位符，3.4.2之后功能，如果冒号前面的属性没有提供，则采用后面的做为属性-->
                <!--需要开启上面的org.apache.ibatis.parsing.PropertyParser.enable-default-value属性-->
                <property name="username" value="${db.username:root}" />
                <property name="password" value="${db.password}" />
            </dataSource>
        </environment>

        <environment id="development2">
            <transactionManager type="JDBC" />

            <!-- 配置数据库连接信息 -->
            <!--参考readme 2-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="${db.url}" />
                <!--占位符，3.4.2之后功能，如果冒号前面的属性没有提供，则采用后面的做为属性-->
                <!--需要开启上面的org.apache.ibatis.parsing.PropertyParser.enable-default-value属性-->
                <property name="username" value="${db.username:root}" />
                <property name="password" value="${db.password}" />
            </dataSource>
        </environment>
    </environments>
    <!--多厂商，对应多个sql方式-->
    <!--MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
        MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。
        如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
        在select中需要指明应对 的数据库
        例如：
        <select id="SelectTime"   resultType="String" databaseId="mysql">
           SELECT  NOW() FROM dual
        </select>
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>

    <mappers>
        <mapper resource="training/mapper/xml/RoleMapper.xml"/>
        <mapper resource="training/mapper/xml/SettingMapper.xml"/>
        <mapper resource="training/mapper/xml/UserMapper.xml"/>
    </mappers>


</configuration>