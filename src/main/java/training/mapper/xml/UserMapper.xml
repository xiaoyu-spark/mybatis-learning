<?xml version="1.0" encoding="GBK" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="training.mapper.xml.userMapper">
    <resultMap id="userMap" type="training.bean.User">
        <id property="id" column="id"></id>
        <result property="name" column="name"></result>
        <result property="email" column="email"></result>
        <result property="password" column="password"></result>
        <result property="description" column="description"></result>
        <result property="mobile" column="mobile"></result>
        <association property="setting" javaType="training.bean.Setting">
            <id property="key" column="key"></id>
            <result property="name" column="setting_name"/>
            <result property="value" column="value"/>
        </association>
        <collection property="roles" ofType="training.bean.Role">
            <id property="id" column="role_id"/>
            <result property="name" column="role_name"/>
            <result property="enName" column="en_name"/>
        </collection>
        <!-- 将当前查询结果返回不同的类型，前提是有继承关系 -->
        <discriminator javaType="string" column="status">
            <case value="0" resultMap="adminUserMap"/>
            <case value="1" resultMap="userMap"/>
        </discriminator>
    </resultMap>

    <resultMap id="adminUserMap" type="AdminUser">
        <id property="id" column="id"></id>
        <result property="name" column="name"></result>
        <result property="email" column="email"></result>
        <result property="password" column="password"></result>
        <result property="description" column="description"></result>
    </resultMap>
    <sql id="userSql">
        ${alias}.id,${alias}.name,${alias}.email,${alias}.passwordHash,${alias}.description,${alias}.mobile,${alias}.status
    </sql>
    <sql id="settingSql">
        ${alias}.key,${alias}.name as setting_name,${alias}.value
    </sql>
    <sql id="roleSql">
        ${alias}.id as role_id,${alias}.name as role_name,${alias}.en_name
    </sql>
    <select id="selectUserById" parameterType="int" resultMap="userMap">
        SELECT
          <include refid="userSql">
              <property name="alias" value="t1"/>
          </include>,
          <include refid="settingSql">
              <property name="alias" value="t2"/>
          </include>,
          <include refid="roleSql">
              <property name="alias" value="t4"/>
          </include>
        FROM
        user t1 left join settings t2 on t1.setting_id=t2.key
                LEFT JOIN role_user t3 on t1.id=t3.user_id
                LEFT JOIN role t4 on t3.role_id=t4.id
        WHERE t1.id=#{id,javaType=_int, jdbcType=INTEGER}
    </select>

    <select id="selectWithWhereTag" parameterType="training.bean.User" resultMap="userMap">
        SELECT
        <include refid="userSql">
            <property name="alias" value="t1"/>
        </include>,
        <include refid="settingSql">
            <property name="alias" value="t2"/>
        </include>,
        <include refid="roleSql">
            <property name="alias" value="t4"/>
        </include>
        FROM
        user t1 left join settings t2 on t1.setting_id=t2.key
        LEFT JOIN role_user t3 on t1.id=t3.user_id
        LEFT JOIN role t4 on t3.role_id=t4.id
        <where>
            <if test="id != null">
                and t1.id=#{id,javaType=string, jdbcType=INTEGER}
            </if>
            <choose>
                <when test="name != null">
                    and t1.name=#{name,javaType=string, jdbcType=VARCHAR}
                </when>
                <otherwise>
                    and t1.description=#{description,javaType=string, jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </where>
    </select>
</mapper>